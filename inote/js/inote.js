// Generated by CoffeeScript 1.7.1
(function() {
  this.iNote = function(domContainer) {
    var CELLS, appendNewCell, clear, createNewCell, deleteCell, fullScreen, getCellInfo, getIndexByCellNumber, getNewCellNumber, getTheme, getXmlText, globalKeyHandler, inserCellAfter, insertCellBefore, isCellFirst, isCellLast, moveFocusToNextCell, moveFocusToPreviousCell, removeFocusAll, setTheme, setXmlText, _container, _init, _themeName;
    _container = domContainer;
    CELLS = [];
    _themeName = "";
    getNewCellNumber = function() {
      var i, n;
      n = 0;
      i = 0;
      while (i < CELLS.length) {
        if (n <= CELLS[i].getNumber()) {
          n = CELLS[i].getNumber() + 1;
        }
        i++;
      }
      return n;
    };

    /*
    find cell index in CELLS array  by cell number
     */
    getIndexByCellNumber = function(cellNumber) {
      var i;
      i = 0;
      while (i < CELLS.length) {
        if (cellNumber === CELLS[i].getNumber()) {
          return i;
        }
        i++;
      }
      return -1;
    };
    deleteCell = function(cellNumber) {
      var i;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      CELLS[i].getJQueryCell().remove();
      CELLS.splice(i, 1);
    };
    inserCellAfter = function(cellNumber) {
      var i, newCell;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      newCell = createNewCell(getNewCellNumber());
      newCell.getJQueryCell().insertAfter($("#cell" + cellNumber));
      CELLS.splice(i + 1, 0, newCell);
      newCell.setFocus(0, 0);
      return newCell;
    };
    insertCellBefore = function(cellNumber) {
      var i, newCell;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      newCell = createNewCell(getNewCellNumber());
      newCell.getJQueryCell().insertBefore($("#cell" + cellNumber));
      CELLS.splice(i, 0, newCell);
      newCell.setFocus(0, 0);
      return newCell;
    };
    globalKeyHandler = function(event) {
      var cell, cellNumber, ci, index, key;
      key = event.which;
      ci = getCellInfo(event);
      cell = ci.cell;
      index = ci.index;
      cellNumber = ci.number;
      if (key === 13 && event.shiftKey) {
        if (isCellLast(index)) {
          appendNewCell(getNewCellNumber());
        }
        moveFocusToNextCell(index);
      } else if (key === 38 && cell.cursorOnFirstLine()) {
        moveFocusToPreviousCell(index);
      } else {
        if (key === 40 && cell.cursorOnLastLine()) {
          moveFocusToNextCell(index);
        }
      }
    };
    createNewCell = function(cellNumber) {
      var newCell;
      newCell = new Cell(cellNumber, _themeName);
      newCell.setDeleteCallback(deleteCell);
      newCell.setInsertBeforeCallback(insertCellBefore);
      newCell.setInsertAfterCallback(inserCellAfter);
      return newCell;
    };
    appendNewCell = function(cellNumber) {
      var newCell;
      newCell = createNewCell(cellNumber);
      newCell.getJQueryCell().appendTo(_container);
      CELLS.push(newCell);
      return newCell;
    };
    getCellInfo = function(event) {
      var c, cellNumber, i;
      c = $(event.target).parents(".cell");
      cellNumber = c.data("number");
      i = 0;
      while (i < CELLS.length) {
        if (cellNumber === CELLS[i].getNumber()) {
          return {
            cell: CELLS[i],
            index: i,
            number: cellNumber
          };
        }
        i++;
      }
      return {
        cell: null,
        index: -1,
        number: cellNumber
      };
    };
    isCellFirst = function(index) {
      return index <= 0;
    };
    isCellLast = function(index) {
      return index >= CELLS.length - 1;
    };
    moveFocusToNextCell = function(index) {
      var nextCell;
      if (isCellLast(index)) {
        return;
      }
      if (fullScreen(index)) {
        return;
      }
      removeFocusAll();
      nextCell = CELLS[index + 1];
      nextCell.setFocus();
      nextCell.setCursorOnFirstLine();
    };
    moveFocusToPreviousCell = function(index) {
      var prevCell;
      if (isCellFirst(index)) {
        return;
      }
      if (fullScreen(index)) {
        return;
      }
      removeFocusAll();
      prevCell = CELLS[index - 1];
      prevCell.setFocus();
      prevCell.setCursorOnLastLine();
    };
    fullScreen = function(index) {
      var editor;
      editor = CELLS[index].getEditor();
      return isFullScreen(editor);
    };
    removeFocusAll = function() {
      var i;
      i = 0;
      while (i < CELLS.length) {
        CELLS[i].removeFocus();
        i++;
      }
    };
    setXmlText = function(xmlText) {
      var cell, cells, i, newCell, notebook;
      notebook = $(xmlText);
      _themeName = notebook.attr("theme");
      cells = notebook.find("cell");
      i = 0;
      while (i < cells.length) {
        cell = $(cells[i]);
        newCell = appendNewCell(cell.attr("number"));
        newCell.setXml(cell);
        i++;
      }
    };
    getXmlText = function(notebookName) {
      var i, notebook;
      notebook = $("<inote name='" + notebookName + "' theme='" + _themeName + "'/>");
      i = 0;
      while (i < CELLS.length) {
        notebook.append(CELLS[i].getXml());
        i++;
      }
      return notebook.wrap("<wrapper/>").parent().html();
    };
    _init = function() {
      appendNewCell(getNewCellNumber()).setFocus(0, 0);
      _container.bind("keydown", globalKeyHandler);
    };
    clear = function() {
      var cells;
      cells = _container.find(".cell").remove();
      CELLS = [];
    };
    setTheme = function(themeName) {
      var editor, i;
      _themeName = themeName;
      i = 0;
      while (i < CELLS.length) {
        editor = CELLS[i].getEditor();
        editor.setOption("theme", themeName);
        CELLS[i].getJavascriptTextViewer().setOption("theme", themeName);
        i++;
      }
    };
    getTheme = function() {
      return _themeName;
    };
    this.setXmlText = setXmlText;
    this.getXmlText = getXmlText;
    this.clear = clear;
    this.init = _init;
    this.setTheme = setTheme;
    this.getTheme = getTheme;
  };

}).call(this);

//# sourceMappingURL=inote.map
