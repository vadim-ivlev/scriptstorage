// Generated by CoffeeScript 1.8.0
(function() {
  this.iNote = function(domContainer) {
    var CELLS, appendNewCell, clear, createNewCell, deleteCell, fullScreen, getCellInfo, getIndexByCellNumber, getKeyMap, getNewCellNumber, getTheme, getXmlText, getXmlText0, getXmlText1, globalKeyHandler, inserCellAfter, insertCellBefore, isCellFirst, isCellLast, moveFocusToNextCell, moveFocusToPreviousCell, runCell, setKeyMap, setTheme, setXmlText, setXmlText0, setXmlText1, _VER, _bindKeys, _container, _init, _keyMap, _themeName;
    _container = domContainer;
    CELLS = [];
    _themeName = "";
    _keyMap = "default";
    getNewCellNumber = function() {
      var c;
      if (CELLS.length === 0) {
        return 0;
      } else {
        return 1 + Math.max.apply(Math, ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
            c = CELLS[_i];
            _results.push(c.getNumber());
          }
          return _results;
        })()));
      }
    };

    /*
    find cell index in CELLS array  by cell number
     */
    getIndexByCellNumber = function(cellNumber) {
      var c;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
          c = CELLS[_i];
          _results.push(c.getNumber());
        }
        return _results;
      })()).indexOf(cellNumber);
    };
    deleteCell = function(cellNumber) {
      var i;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      CELLS[i].getJQueryCell().remove();
      CELLS.splice(i, 1);
    };
    inserCellAfter = function(cellNumber) {
      var i, newCell;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      newCell = createNewCell(getNewCellNumber());
      newCell.unlock();
      newCell.getJQueryCell().insertAfter($("#cell" + cellNumber));
      CELLS.splice(i + 1, 0, newCell);
      newCell.setFocus(0, 0);
      return newCell;
    };
    insertCellBefore = function(cellNumber) {
      var i, newCell;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      newCell = createNewCell(getNewCellNumber());
      newCell.unlock();
      newCell.getJQueryCell().insertBefore($("#cell" + cellNumber));
      CELLS.splice(i, 0, newCell);
      newCell.setFocus(0, 0);
      return newCell;
    };
    globalKeyHandler = function(event) {
      var cell, cellNumber, ci, index, key;
      key = event.which;
      ci = getCellInfo(event);
      cell = ci.cell;
      index = ci.index;
      cellNumber = ci.number;
      if (key === 13 && event.shiftKey) {
        if (isCellLast(index)) {
          appendNewCell(getNewCellNumber());
        }
        moveFocusToNextCell(index);
      } else if (key === 38 && cell.cursorOnFirstLine()) {
        moveFocusToPreviousCell(index);
      } else {
        if (key === 40 && cell.cursorOnLastLine()) {
          moveFocusToNextCell(index);
        }
      }
    };
    createNewCell = function(cellNumber) {
      var newCell;
      newCell = new Cell(cellNumber, _themeName, _keyMap);
      newCell.setDeleteCallback(deleteCell);
      newCell.setInsertBeforeCallback(insertCellBefore);
      newCell.setInsertAfterCallback(inserCellAfter);
      return newCell;
    };
    appendNewCell = function(cellNumber) {
      var newCell;
      newCell = createNewCell(cellNumber);
      newCell.getJQueryCell().appendTo(_container);
      CELLS.push(newCell);
      return newCell;
    };
    getCellInfo = function(event) {
      var C, cellNumber, i, _i, _len;
      i = -1;
      cellNumber = $(event.target).parents(".cell").data("number");
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        C = CELLS[_i];
        i++;
        if (cellNumber === C.getNumber()) {
          return {
            cell: C,
            index: i,
            number: cellNumber
          };
        }
      }
      return {
        cell: null,
        index: -1,
        number: cellNumber
      };
    };
    isCellFirst = function(index) {
      return index <= 0;
    };
    isCellLast = function(index) {
      return index >= CELLS.length - 1;
    };
    moveFocusToNextCell = function(index) {
      var c, nextCell, _i, _len;
      if (isCellLast(index)) {
        return;
      }
      if (fullScreen(index)) {
        return;
      }
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        c = CELLS[_i];
        c.removeFocus();
      }
      nextCell = CELLS[index + 1];
      nextCell.setFocus();
      nextCell.setCursorOnFirstLine();
    };
    moveFocusToPreviousCell = function(index) {
      var c, prevCell, _i, _len;
      if (isCellFirst(index)) {
        return;
      }
      if (fullScreen(index)) {
        return;
      }
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        c = CELLS[_i];
        c.removeFocus();
      }
      prevCell = CELLS[index - 1];
      prevCell.setFocus();
      prevCell.setCursorOnLastLine();
    };
    fullScreen = function(index) {
      var editor;
      editor = CELLS[index].getEditor();
      return isFullScreen(editor);
    };
    _VER = "1";
    getXmlText = function(notebookName) {
      if (_VER === "1") {
        return getXmlText1(notebookName);
      } else {
        return getXmlText0(notebookName);
      }
    };
    setXmlText = function(xmlText) {
      if ($(xmlText).attr("version") === "1") {
        return setXmlText1(xmlText);
      } else {
        return setXmlText0(xmlText);
      }
    };
    setXmlText0 = function(xmlText) {
      var c, cell, cells, newCell, notebook, _i, _len;
      notebook = $(xmlText);
      _themeName = notebook.attr("theme");
      _keyMap = notebook.attr("keyMap");
      cells = notebook.find("cell");
      for (_i = 0, _len = cells.length; _i < _len; _i++) {
        c = cells[_i];
        cell = $(c);
        newCell = appendNewCell(cell.attr("number"));
        newCell.setXml(cell);
      }
    };
    getXmlText0 = function(notebookName) {
      var C, notebook, _i, _len;
      notebook = $("<inote name='" + notebookName + "' theme='" + _themeName + "' keyMap='" + _keyMap + "'/>");
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        C = CELLS[_i];
        notebook.append(C.getXml());
      }
      return notebook.wrap("<wrapper/>").parent().html();
    };
    setXmlText1 = function(xmlText) {
      var c, cell, cells, newCell, notebook, _i, _len;
      notebook = $(xmlText);
      _themeName = notebook.attr("theme");
      _keyMap = notebook.attr("keyMap");
      cells = notebook.find("div.cell");
      for (_i = 0, _len = cells.length; _i < _len; _i++) {
        c = cells[_i];
        cell = $(c);
        newCell = appendNewCell(cell.attr("number"));
        newCell.setXml(cell);
      }
    };
    getXmlText1 = function(notebookName) {
      var C, notebook, _i, _len;
      notebook = $("<div class='book' version='1' name='" + notebookName + "' theme='" + _themeName + "' keyMap='" + _keyMap + "'/>");
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        C = CELLS[_i];
        notebook.append(C.getXml());
      }
      return notebook.wrap("<wrapper/>").parent().html();
    };
    _init = function() {
      var nc;
      nc = appendNewCell(getNewCellNumber());
      _bindKeys();
      nc.setFocus(0, 0);
      nc.unlock();
    };
    _bindKeys = function() {
      return _container.bind("keydown", globalKeyHandler);
    };
    clear = function() {
      var cells;
      cells = _container.find(".cell").remove();
      return CELLS = [];
    };
    setTheme = function(themeName) {
      var C, _i, _len, _results;
      _themeName = themeName;
      _results = [];
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        C = CELLS[_i];
        _results.push(C.setTheme(themeName));
      }
      return _results;
    };
    getTheme = function() {
      return _themeName;
    };
    setKeyMap = function(keyMap) {
      var C, _i, _len, _results;
      _keyMap = keyMap;
      _results = [];
      for (_i = 0, _len = CELLS.length; _i < _len; _i++) {
        C = CELLS[_i];
        _results.push(C.setKeyMap(keyMap));
      }
      return _results;
    };
    getKeyMap = function() {
      return _keyMap;
    };
    runCell = function(cellNumber) {
      var i;
      i = getIndexByCellNumber(cellNumber);
      if (i === -1) {
        return;
      }
      return CELLS[i].execute();
    };
    this.setXmlText = setXmlText;
    this.getXmlText = getXmlText;
    this.clear = clear;
    this.init = _init;
    this.bindKeys = _bindKeys;
    this.setTheme = setTheme;
    this.getTheme = getTheme;
    this.setKeyMap = setKeyMap;
    this.getKeyMap = getKeyMap;
    this.runCell = runCell;
  };

}).call(this);

//# sourceMappingURL=inote.js.map
