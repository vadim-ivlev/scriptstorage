// Generated by CoffeeScript 1.8.0
(function() {
  var clearAndInit, getNotebookAccessFromUrl, getNotebookNameFromUrl, getNotebookOwnerFromUrl, hideMenu, inote, openNotebook, restoreNotebookFromXml, saveNotebookTimeout, showMenu, storage;

  storage = new NoteBookStorage();

  saveNotebookTimeout = void 0;

  inote = void 0;

  this.preventClick = function(event) {
    event.stopPropagation();
  };

  this.selectTheme = function() {
    inote.setTheme($("#selectTheme_button").val());
    this.saveNotebookLater();
  };

  this.selectKeyMap = function() {
    inote.setKeyMap($("#notebookEditor").val());
    this.saveNotebookLater();
  };

  this.clearSaveIndicator = function() {
    return $("#saveIndicator").text("");
  };

  this.saveNotebookLater = function() {
    $("#saveIndicator").text("*");
    clearTimeout(saveNotebookTimeout);
    if ($("#autoSave").is(":checked")) {
      saveNotebookTimeout = setTimeout(saveNotebook, 2000);
    }
  };

  this.saveNotebook = function(event) {
    var notebookAccess, notebookName, notebookOwner, notebookVersion, xmlText;
    notebookName = $("#notebookName").text();
    notebookOwner = $(".user_social_name").text();
    notebookAccess = $("#notebookAccess").val();
    notebookVersion = event ? null : $(".notebookVersion").text();
    xmlText = inote.getXmlText(notebookName);
    console.log("saveNotebook");
    storage.put(notebookAccess, notebookName, xmlText, notebookVersion, function(d) {
      var o;
      o = d;
      if (!o) {
        return;
      }
      if (o.error) {
        alert(o.error);
      } else {
        $("#saveIndicator").text("");
        $(".notebookVersion").text(o.version);
      }
    });
    hideMenu();
  };

  this.saveAs = function() {
    var newName;
    newName = prompt("Save as", $("#notebookName").text());
    if (newName) {
      $("#notebookName").text(newName);
    }
    this.saveNotebook(true);
    return hideMenu();
  };

  this.showRenameDialog = function(btnOkText, callback) {
    var b;
    b = $("#renameDialog .btnOk");
    b.text(btnOkText);
    b.unbind();
    b.bind('click', callback);
    return $("#renameDialog").show();
  };

  this.rename = function() {
    return alert("Not implemented");
  };

  this.getPageUrl = function(user_name, user_network, access, notebook_name) {
    var name, unet;
    unet = encodeURIComponent(user_name + '|' + user_network);
    access = encodeURIComponent(access);
    name = encodeURIComponent(notebook_name);
    return "/page?owner=" + unet + "&access=" + access + "&name=" + name;
  };

  this.rename2 = function(accessChanged) {
    var key_name, newName, notebookAccess, notebookName, notebookOwner, notebookVersion, old_notebookAccess, xmlText;
    if (!accessChanged) {
      newName = prompt("Rename", $("#notebookName").text());
      if (newName) {
        $("#notebookName").text(newName);
      }
    }
    notebookName = $("#notebookName").text();
    notebookAccess = $("#notebookAccess").val();
    old_notebookAccess = notebookAccess;
    if (accessChanged) {
      old_notebookAccess = notebookAccess === "public" ? "private" : "public";
    }
    notebookVersion = null;
    xmlText = inote.getXmlText(notebookName);
    notebookOwner = $("#notebookOwner").text();
    key_name = notebookOwner + "/" + old_notebookAccess + "/" + notebookName;
    console.log("Rename Notebook: " + key_name);
    storage.rename(key_name, notebookAccess, notebookName, xmlText, notebookVersion, function(d) {
      var newUrl, o, user_name, user_network;
      o = d;
      if (!o) {
        return;
      }
      if (o.error) {
        alert(o.error);
      } else {
        $("#saveIndicator").text("");
        $(".notebookVersion").text(o.version);
        $(".nbAccess").text(notebookAccess);
        user_name = $(".user_social_name").text();
        user_network = $(".user_network").text();
        newUrl = getPageUrl(user_name, user_network, notebookAccess, notebookName);
        window.history.replaceState(null, notebookAccess, newUrl);
      }
    });
    hideMenu();
  };

  openNotebook = function(notebookOwner, notebookAccess, notebookName) {
    clearAndInit();
    if (!notebookName) {
      return;
    }
    $(".notebookOwner").text(notebookOwner);
    $("#notebookName").text(notebookName);
    $("#notebookAccess").val(notebookAccess);
  };

  restoreNotebookFromXml = function(xmlText) {
    var empty, keyMap, notebook, themeName;
    empty = xmlText.replace(/\s/g, "") === "";
    if (!empty) {
      inote.clear();
      inote.setXmlText(xmlText);
      notebook = $(xmlText);
      themeName = notebook.attr("theme");
      if (themeName) {
        $("#selectTheme_button").val(themeName);
      }
      keyMap = notebook.attr("keyMap");
      if (keyMap) {
        $("#notebookEditor").val(keyMap);
      }
    }
    if ($(".cell").length === 0) {
      inote.init();
    }
    this.clearSaveIndicator();
  };

  getNotebookAccessFromUrl = function() {
    var notebook_access;
    notebook_access = "";
    try {
      notebook_access = location.href.match(/access=([^&]*)/)[1];
    } catch (_error) {}
    notebook_access = decodeURIComponent(notebook_access);
    return notebook_access;
  };

  getNotebookNameFromUrl = function() {
    var notebook_name;
    notebook_name = "";
    try {
      notebook_name = location.href.match(/name=([^&]*)/)[1];
    } catch (_error) {}
    notebook_name = decodeURIComponent(notebook_name);
    return notebook_name;
  };

  getNotebookOwnerFromUrl = function() {
    var notebook_owner;
    notebook_owner = "";
    try {
      notebook_owner = location.href.match(/owner=([^&]*)/)[1];
    } catch (_error) {}
    notebook_owner = decodeURIComponent(notebook_owner);
    return notebook_owner;
  };

  clearAndInit = function() {
    inote.clear();
    inote.init();
  };

  showMenu = function() {
    return $("#saveGroup").animate({
      left: 0,
      easing: 'linear'
    }, 100);
  };

  hideMenu = function() {
    return $("#saveGroup").animate({
      left: '-255px',
      easing: 'linear'
    }, 100);
  };

  $(function() {
    var notebookOwner, page, userId, userName, userNameNetwork, userNetwork, xmlText;
    page = $("#page");
    xmlText = page.html();
    page.html("");
    inote = new iNote($("#page"));
    $("#selectTheme_button").val("default");
    inote.setTheme("default");
    $("#notebookEditor").val("default");
    inote.setKeyMap("default");
    restoreNotebookFromXml(xmlText);
    $("#notebookAccess").val(getNotebookAccessFromUrl());
    userName = $(".user_social_name").text();
    userNetwork = $(".user_network").text();
    userId = $(".user_id").text();
    userNameNetwork = "" + userName + "|" + userNetwork;
    notebookOwner = getNotebookOwnerFromUrl();
    if (userNameNetwork && userNameNetwork === notebookOwner) {
      $("body").keydown(function(event) {
        if (event.ctrlKey && event.keyCode === 83) {
          saveNotebook();
          return false;
        }
      });
    }
    $("#btnHideMenu").click(function(event) {
      event.stopPropagation();
      return hideMenu();
    });
    $("#btnMenu").click(function(event) {
      event.stopPropagation();
      return showMenu();
    });
    $("html").click(function(event) {
      return hideMenu();
    });
    $("#saveGroup").click(function(event) {
      return event.stopPropagation();
    });
    $("#notebookAccess").change(function(event) {
      return rename2(true);
    });
    return window.onbeforeunload = function() {
      if ($("#saveIndicator").text()) {
        return "You have unsaved changes.";
      }
    };
  });

}).call(this);

//# sourceMappingURL=inote.html.js.map
